{"hash":"2399495ed9969d0d295ebaea341ad257bbee248c","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Directive, EventEmitter, TemplateRef, Component, Optional, Inject, Host, Self, Input, Output, HostBinding, HostListener, ViewChild, ContentChild, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i6 from '@angular/material/autocomplete';\nimport { MatAutocompleteTrigger, MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, of, from, merge } from 'rxjs';\nimport { startWith, filter, toArray, distinctUntilChanged, debounceTime, tap, shareReplay, switchMap, takeUntil, mapTo } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/material/core';\nimport { MatOptionModule } from '@angular/material/core';\nimport * as i8 from '@angular/material/progress-bar';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport * as i9 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatInputModule } from '@angular/material/input';\n\nclass PGLOptionDef {\n}\n/** @nocollapse */ PGLOptionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLOptionDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ PGLOptionDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: PGLOptionDef, selector: \"[pglOptionDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLOptionDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[pglOptionDef]\",\n                }]\n        }] });\nclass PGLEmptyOptionDef {\n}\n/** @nocollapse */ PGLEmptyOptionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLEmptyOptionDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ PGLEmptyOptionDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: PGLEmptyOptionDef, selector: \"[pglEmptyOptionDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLEmptyOptionDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[pglEmptyOptionDef]\",\n                }]\n        }] });\nclass PGLLoadingOptionDef {\n}\n/** @nocollapse */ PGLLoadingOptionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLLoadingOptionDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ PGLLoadingOptionDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: PGLLoadingOptionDef, selector: \"[pglLoadingOptionDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLLoadingOptionDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[pglLoadingOptionDef]\",\n                }]\n        }] });\nfunction optionalStartWith(str) {\n    return (source) => coerceBooleanProperty(str) ? source.pipe(startWith(str)) : source;\n}\nclass PGLSearchSelectComponent {\n    constructor(_fm, elementRef, _formField, parentFormField, ngControl) {\n        this._fm = _fm;\n        this.elementRef = elementRef;\n        this._formField = _formField;\n        this.parentFormField = parentFormField;\n        this.ngControl = ngControl;\n        // PUBLIC\n        this.searchField = new FormControl(\"\");\n        this.stateChanges = new Subject();\n        this.controlType = \"pgl-search-select\";\n        this.touched = false;\n        this.focused = false;\n        // private _tabindex = 0;\n        this._disabled = false;\n        this._required = false;\n        this._displayLoading = true;\n        this._isEmptyOptionFirst = false;\n        this._destroyed$ = new Subject();\n        this._startWith = \"\";\n        // private _isStatic = false;\n        this._buttons = {\n            close: \"arrow_drop_up\",\n            open: \"arrow_drop_down\",\n        };\n        this._onChange = (..._) => {\n            // console.error(\"onChange is not set\");\n        };\n        this._onTouched = (..._) => {\n            // console.error(\"onTouch is not set\");\n        };\n        // TODO: Implement static dropdown items\n        // @Input()\n        // get isStatic(): boolean {\n        //     return this._isStatic;\n        // }\n        // set isStatic(val: boolean) {\n        //     this._isStatic = coerceBooleanProperty(val);\n        // }\n        // DISPLAY FN\n        this.displayWith = (item) => `${item || \"\"}`;\n        // VALUE FN\n        this.valueWith = (item) => item;\n        // FILTER WITH FN\n        this.filterWith = (val) => !val || typeof val != \"string\"\n            ? of(this.options)\n            : from(this.options || []).pipe(filter((o) => this.displayWith(o).startsWith(val)), toArray());\n        this.searchWait = 500;\n        this.autoActiveFirstOption = false;\n        this.onSelect = new EventEmitter();\n        this.onFilter = new EventEmitter();\n        this.id = `${this.controlType}-${PGLSearchSelectComponent.nextID++}`;\n        this.describedBy = \"\";\n        // this._fm\n        //     .monitor(this.elementRef.nativeElement, true)\n        //     .subscribe((origin) => {\n        //         this.focused = !!origin;\n        //         if (this.hasControl && !this.ngControl.touched) {\n        //             this.ngControl.control?.markAsTouched();\n        //         }\n        //         if (!this.focused && this.searchField.value !== this._value) {\n        //             this.searchField.patchValue(this.value, {\n        //                 emitEvent: false,\n        //             });\n        //         }\n        //     });\n        if (this.ngControl != null) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    // GETTER AND SETTERS\n    get empty() {\n        return !coerceBooleanProperty(this._value);\n    }\n    get errorState() {\n        return coerceBooleanProperty(this.ngControl?.errors !== null && this.touched);\n    }\n    get host() {\n        return this;\n    }\n    get hidePlaceholder() {\n        return this._formField\n            ? this._formField._hideControlPlaceholder()\n            : false;\n    }\n    get hasControl() {\n        return !!this.ngControl && !!this.ngControl.control;\n    }\n    get displayLoading() {\n        return this._displayLoading;\n    }\n    set displayLoading(val) {\n        this._displayLoading = coerceBooleanProperty(val);\n        this._stateChanged();\n    }\n    // OPTIONS\n    get options() {\n        return this._options;\n    }\n    set options(op) {\n        if (!op || !Array.isArray(op)) {\n            return;\n        }\n        this._options = op;\n        this._stateChanged();\n    }\n    // DISABLED\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(dis) {\n        this._disabled = coerceBooleanProperty(dis);\n        this._stateChanged();\n    }\n    // REQUIRED\n    get required() {\n        return this._required;\n    }\n    set required(req) {\n        this._required = coerceBooleanProperty(req);\n        this._stateChanged();\n    }\n    // PLACEHOLDER\n    get placeholder() {\n        return this._placeholder || \"\";\n    }\n    set placeholder(plh) {\n        this._placeholder = plh || \"\";\n        this._stateChanged();\n    }\n    // VALUE\n    get value() {\n        return this._value;\n    }\n    set value(val) {\n        this._value = val;\n        this.searchField.setValue(this._value);\n        this._stateChanged();\n        this._onChange(this._value);\n    }\n    // Buttons\n    get buttons() {\n        return this._buttons;\n    }\n    set buttons(value) {\n        this._buttons = value;\n    }\n    get isEmptyOptionFirst() {\n        return this._isEmptyOptionFirst;\n    }\n    set isEmptyOptionFirst(val) {\n        this._isEmptyOptionFirst = coerceBooleanProperty(val);\n    }\n    // START WITH\n    get startWith() {\n        return this._startWith;\n    }\n    set startWith(value) {\n        this._startWith = value;\n    }\n    // HOSTBINDING\n    get shouldLabelFloat() {\n        return this.focused || !this.empty || !!this.searchField.value;\n    }\n    onClick() {\n        if (this.autoComplete && !this.autoComplete.autocomplete.isOpen) {\n            this.autoComplete.openPanel();\n        }\n    }\n    onFocusIn(event) {\n        // console.log(event);\n        if (!this.focused) {\n            this.focused = true;\n            if (this.searchField.value !== this._value) {\n                this.searchField.patchValue(this.value, {\n                    emitEvent: false,\n                });\n            }\n            this.stateChanges.next();\n        }\n    }\n    onFocusOut(event) {\n        // console.log(event);\n        if (!this.elementRef.nativeElement.contains(event.relatedTarget)) {\n            this.touched = true;\n            this.focused = false;\n            this._onTouched();\n            this.stateChanges.next();\n        }\n    }\n    setDescribedByIds(ids) {\n        this.describedBy = ids.join(\" \");\n    }\n    ngAfterViewInit() {\n        this._searchTrigger$ = this.searchField.valueChanges.pipe(filter((val) => typeof val == \"string\"), optionalStartWith(this.startWith), distinctUntilChanged(), debounceTime(this.searchWait), tap((val) => this.onFilter.next(val)), shareReplay(1));\n        this.options$ = merge(this.stateChanges.pipe(switchMap((_) => this._searchTrigger$)), this._searchTrigger$).pipe(switchMap(this.filterWith), takeUntil(this._destroyed$), filter((val) => !!val), shareReplay());\n        this.isLoading$ = merge(this._searchTrigger$.pipe(mapTo(this.displayLoading)), this.options$.pipe(mapTo(false)));\n    }\n    ngDoCheck() {\n        if (this.ngControl && this.ngControl.touched != this.touched) {\n            this.touched = this.ngControl.touched ?? false;\n            this._stateChanged();\n            // console.log(\"ng do check\", this.ngControl.touched)\n        }\n    }\n    ngOnDestroy() {\n        // this._fm.stopMonitoring(this.elementRef);\n        this._destroyed$.next();\n        this._destroyed$.complete();\n    }\n    // PRIVATE METHODS\n    _stateChanged() {\n        this.stateChanges.next();\n    }\n    // PUBLIC METHODS\n    toggle(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        if (this.autoComplete.autocomplete.isOpen) {\n            this.autoComplete.closePanel();\n            return;\n        }\n        this.autoComplete.openPanel();\n    }\n    select(e) {\n        if (e.option.value === undefined) {\n            e.option.value = null;\n            this.searchField.patchValue(null);\n            this.options$ = this.filterWith(this.startWith);\n        }\n        this._value = e.option.value;\n        this._onChange(this._value);\n        this.onSelect.emit(this._value);\n    }\n    onContainerClick(event) {\n        if (event.target.tagName.toLowerCase() !== \"input\") {\n            const input = this.elementRef.nativeElement.querySelector(\"input\");\n            if (input) {\n                input.focus();\n            }\n        }\n    }\n    // ControlValueAccessor methods\n    /**\n     *\n     */\n    writeValue(v) {\n        // if (!v) {\n        //     return;\n        // }\n        this.value = v;\n    }\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    setDisabledState(_) { }\n}\n// STATIC\nPGLSearchSelectComponent.nextID = 0;\n/** @nocollapse */ PGLSearchSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLSearchSelectComponent, deps: [{ token: i1.FocusMonitor }, { token: i0.ElementRef }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: i2.MatFormField, optional: true }, { token: i3.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });\n/** @nocollapse */ PGLSearchSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: PGLSearchSelectComponent, selector: \"pgl-search-select\", inputs: { displayLoading: \"displayLoading\", options: \"options\", disabled: \"disabled\", required: \"required\", placeholder: \"placeholder\", value: \"value\", buttons: \"buttons\", isEmptyOptionFirst: [\"pglEmptyOptionFirst\", \"isEmptyOptionFirst\"], startWith: \"startWith\", displayWith: \"displayWith\", valueWith: \"valueWith\", filterWith: \"filterWith\", searchWait: \"searchWait\", autoActiveFirstOption: \"autoActiveFirstOption\" }, outputs: { onSelect: \"onSelect\", onFilter: \"onFilter\" }, host: { listeners: { \"click\": \"onClick()\" }, properties: { \"class.floating\": \"this.shouldLabelFloat\", \"id\": \"this.id\", \"attr.aria-describedby\": \"this.describedBy\" } }, providers: [\n        { provide: MatFormFieldControl, useExisting: PGLSearchSelectComponent },\n    ], queries: [{ propertyName: \"optionDef\", first: true, predicate: PGLOptionDef, descendants: true, read: TemplateRef }, { propertyName: \"emptyOptionDef\", first: true, predicate: PGLEmptyOptionDef, descendants: true, read: TemplateRef }, { propertyName: \"loadingOptionDef\", first: true, predicate: PGLLoadingOptionDef, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: \"autoComplete\", first: true, predicate: [\"autoCompleteInput\"], descendants: true, read: MatAutocompleteTrigger }], ngImport: i0, template: `\n        <input\n            [placeholder]=\"!hidePlaceholder ? placeholder : ''\"\n            #autoCompleteInput\n            [matAutocomplete]=\"listOptions\"\n            [formControl]=\"searchField\"\n            [matAutocompleteConnectedTo]=\"host\"\n            [attr.aria-describedby]=\"describedBy\"\n            [attr.aria-labelledby]=\"parentFormField?.getLabelId()\"\n            (focusin)=\"onFocusIn($event)\"\n            (focusout)=\"onFocusOut($event)\"\n        />\n        <div class=\"open-button\">\n            <button\n                matSuffix\n                tabindex=\"-1\"\n                mat-icon-button\n                (click)=\"toggle($event)\"\n            >\n                <mat-icon>{{\n                    !listOptions.isOpen ? buttons.open : buttons.close\n                }}</mat-icon>\n            </button>\n        </div>\n\n        <mat-autocomplete\n            #listOptions=\"matAutocomplete\"\n            class=\"dropdown-panel-custom\"\n            (optionSelected)=\"select($event)\"\n            [autoActiveFirstOption]=\"autoActiveFirstOption\"\n            [displayWith]=\"displayWith\"\n        >\n            <ng-container *ngIf=\"isLoading$ | async; else list\">\n                <mat-option class=\"is-loading\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            loadingOptionDef\n                                ? loadingOptionDef\n                                : defaultLoadingOption\n                        \"\n                    ></ng-container>\n                </mat-option>\n            </ng-container>\n\n            <ng-template #list>\n                <ng-container *ngIf=\"options$ | async as ops\">\n                    <mat-option *ngIf=\"emptyOptionDef && isEmptyOptionFirst\">\n                        <ng-container\n                            *ngTemplateOutlet=\"emptyOptionDef\"\n                        ></ng-container>\n                    </mat-option>\n                    <mat-option *ngFor=\"let option of ops\" [value]=\"option\">\n                        <ng-container\n                            *ngTemplateOutlet=\"\n                                optionDef ? optionDef : defaultOption;\n                                context: { $implicit: option }\n                            \"\n                        ></ng-container>\n                    </mat-option>\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            emptyOptionDef && !isEmptyOptionFirst\n                                ? emptyOptionDef\n                                : false\n                        \"\n                    ></ng-container>\n                </ng-container>\n            </ng-template>\n\n            <ng-template #defaultOption let-option>\n                {{ displayWith(option) }}\n            </ng-template>\n\n            <ng-template #defaultLoadingOption>\n                <mat-progress-bar mode=\"query\"></mat-progress-bar>\n            </ng-template>\n        </mat-autocomplete>\n    `, isInline: true, styles: [\"input{border:none;background:none;padding:0;outline:none;font:inherit;flex:1;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}span{opacity:0;transition:opacity .2s}button{align-self:center;width:30px;height:30px;line-height:30px;border-radius:10%}:host.floating span{opacity:1}input::-webkit-outer-spin-button,input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}:host{display:flex;flex-direction:row;align-items:center;vertical-align:bottom;margin-bottom:-.2em;margin-top:-.0625em}.open-button{white-space:nowrap;flex:none;position:relative}.open-button button{font:inherit;vertical-align:baseline;height:1.5em;width:1.5em}.open-button .mat-icon-button .mat-icon{height:1.125em;line-height:1.125em}\\n\"], components: [{ type: i4.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i5.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i6.MatAutocomplete, selector: \"mat-autocomplete\", inputs: [\"disableRipple\"], exportAs: [\"matAutocomplete\"] }, { type: i7.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { type: i8.MatProgressBar, selector: \"mat-progress-bar\", inputs: [\"color\", \"value\", \"bufferValue\", \"mode\"], outputs: [\"animationEnd\"], exportAs: [\"matProgressBar\"] }], directives: [{ type: i6.MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", exportAs: [\"matAutocompleteTrigger\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: i2.MatSuffix, selector: \"[matSuffix]\" }, { type: i9.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i9.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i9.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"async\": i9.AsyncPipe } });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLSearchSelectComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"pgl-search-select\",\n                    template: `\n        <input\n            [placeholder]=\"!hidePlaceholder ? placeholder : ''\"\n            #autoCompleteInput\n            [matAutocomplete]=\"listOptions\"\n            [formControl]=\"searchField\"\n            [matAutocompleteConnectedTo]=\"host\"\n            [attr.aria-describedby]=\"describedBy\"\n            [attr.aria-labelledby]=\"parentFormField?.getLabelId()\"\n            (focusin)=\"onFocusIn($event)\"\n            (focusout)=\"onFocusOut($event)\"\n        />\n        <div class=\"open-button\">\n            <button\n                matSuffix\n                tabindex=\"-1\"\n                mat-icon-button\n                (click)=\"toggle($event)\"\n            >\n                <mat-icon>{{\n                    !listOptions.isOpen ? buttons.open : buttons.close\n                }}</mat-icon>\n            </button>\n        </div>\n\n        <mat-autocomplete\n            #listOptions=\"matAutocomplete\"\n            class=\"dropdown-panel-custom\"\n            (optionSelected)=\"select($event)\"\n            [autoActiveFirstOption]=\"autoActiveFirstOption\"\n            [displayWith]=\"displayWith\"\n        >\n            <ng-container *ngIf=\"isLoading$ | async; else list\">\n                <mat-option class=\"is-loading\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            loadingOptionDef\n                                ? loadingOptionDef\n                                : defaultLoadingOption\n                        \"\n                    ></ng-container>\n                </mat-option>\n            </ng-container>\n\n            <ng-template #list>\n                <ng-container *ngIf=\"options$ | async as ops\">\n                    <mat-option *ngIf=\"emptyOptionDef && isEmptyOptionFirst\">\n                        <ng-container\n                            *ngTemplateOutlet=\"emptyOptionDef\"\n                        ></ng-container>\n                    </mat-option>\n                    <mat-option *ngFor=\"let option of ops\" [value]=\"option\">\n                        <ng-container\n                            *ngTemplateOutlet=\"\n                                optionDef ? optionDef : defaultOption;\n                                context: { $implicit: option }\n                            \"\n                        ></ng-container>\n                    </mat-option>\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            emptyOptionDef && !isEmptyOptionFirst\n                                ? emptyOptionDef\n                                : false\n                        \"\n                    ></ng-container>\n                </ng-container>\n            </ng-template>\n\n            <ng-template #defaultOption let-option>\n                {{ displayWith(option) }}\n            </ng-template>\n\n            <ng-template #defaultLoadingOption>\n                <mat-progress-bar mode=\"query\"></mat-progress-bar>\n            </ng-template>\n        </mat-autocomplete>\n    `,\n                    styles: [\n                        `\n            input {\n                border: none;\n                background: none;\n                padding: 0;\n                outline: none;\n                font: inherit;\n                flex: 1;\n                width: 100%;\n                max-width: 100%;\n                vertical-align: bottom;\n                text-align: inherit;\n            }\n            span {\n                opacity: 0;\n                transition: opacity 200ms;\n            }\n            button {\n                align-self: center;\n                width: 30px;\n                height: 30px;\n                line-height: 30px;\n                border-radius: 10%;\n            }\n            :host.floating span {\n                opacity: 1;\n            }\n\n            input::-webkit-outer-spin-button,\n            input::-webkit-inner-spin-button {\n                -webkit-appearance: none;\n                margin: 0;\n            }\n\n            :host {\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                vertical-align: bottom;\n                margin-bottom: -0.2em;\n                margin-top: -0.0625em;\n            }\n            .open-button {\n                white-space: nowrap;\n                flex: none;\n                position: relative;\n            }\n            .open-button button {\n                font: inherit;\n                vertical-align: baseline;\n                height: 1.5em;\n                width: 1.5em;\n            }\n            .open-button .mat-icon-button .mat-icon {\n                height: 1.125em;\n                line-height: 1.125em;\n            }\n        `,\n                    ],\n                    providers: [\n                        { provide: MatFormFieldControl, useExisting: PGLSearchSelectComponent },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i1.FocusMonitor }, { type: i0.ElementRef }, { type: i2.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }, {\n                    type: Host\n                }] }, { type: i2.MatFormField, decorators: [{\n                    type: Optional\n                }] }, { type: i3.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }]; }, propDecorators: { displayLoading: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], buttons: [{\n                type: Input\n            }], isEmptyOptionFirst: [{\n                type: Input,\n                args: [\"pglEmptyOptionFirst\"]\n            }], startWith: [{\n                type: Input\n            }], displayWith: [{\n                type: Input\n            }], valueWith: [{\n                type: Input\n            }], filterWith: [{\n                type: Input\n            }], searchWait: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input\n            }], onSelect: [{\n                type: Output\n            }], onFilter: [{\n                type: Output\n            }], shouldLabelFloat: [{\n                type: HostBinding,\n                args: [\"class.floating\"]\n            }], id: [{\n                type: HostBinding\n            }], describedBy: [{\n                type: HostBinding,\n                args: [\"attr.aria-describedby\"]\n            }], onClick: [{\n                type: HostListener,\n                args: [\"click\"]\n            }], autoComplete: [{\n                type: ViewChild,\n                args: [\"autoCompleteInput\", { read: MatAutocompleteTrigger }]\n            }], optionDef: [{\n                type: ContentChild,\n                args: [PGLOptionDef, { read: TemplateRef }]\n            }], emptyOptionDef: [{\n                type: ContentChild,\n                args: [PGLEmptyOptionDef, { read: TemplateRef }]\n            }], loadingOptionDef: [{\n                type: ContentChild,\n                args: [PGLLoadingOptionDef, { read: TemplateRef }]\n            }] } });\n\nclass PglSearchSelectModule {\n}\n/** @nocollapse */ PglSearchSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PglSearchSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ PglSearchSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PglSearchSelectModule, declarations: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef], imports: [BrowserAnimationsModule,\n        CommonModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatAutocompleteModule,\n        MatProgressBarModule,\n        MatIconModule,\n        MatButtonModule,\n        MatOptionModule], exports: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef] });\n/** @nocollapse */ PglSearchSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PglSearchSelectModule, imports: [[\n            BrowserAnimationsModule,\n            CommonModule,\n            ReactiveFormsModule,\n            MatFormFieldModule,\n            MatInputModule,\n            MatAutocompleteModule,\n            MatProgressBarModule,\n            MatIconModule,\n            MatButtonModule,\n            MatOptionModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PglSearchSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef],\n                    imports: [\n                        BrowserAnimationsModule,\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatFormFieldModule,\n                        MatInputModule,\n                        MatAutocompleteModule,\n                        MatProgressBarModule,\n                        MatIconModule,\n                        MatButtonModule,\n                        MatOptionModule\n                    ],\n                    exports: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef]\n                }]\n        }] });\n\n/*\n * Public API Surface of pgl-search-select\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PGLEmptyOptionDef, PGLLoadingOptionDef, PGLOptionDef, PGLSearchSelectComponent, PglSearchSelectModule, optionalStartWith };\n//# sourceMappingURL=pgl-cortex-pgl-search-select.mjs.map\n","map":{"version":3,"file":"pgl-cortex-pgl-search-select.mjs","sources":["../../../projects/pgl-search-select/src/lib/pgl-search-select.component.ts","../../../projects/pgl-search-select/src/lib/pgl-search-select.module.ts","../../../projects/pgl-search-select/src/public-api.ts","../../../projects/pgl-search-select/src/pgl-cortex-pgl-search-select.ts"],"sourcesContent":["import {\n    Component,\n    OnInit,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    DoCheck,\n    Input,\n    HostBinding,\n    Output,\n    EventEmitter,\n    ViewChild,\n    TemplateRef,\n    Directive,\n    Optional,\n    Self,\n    ContentChild,\n    Inject,\n    Host,\n    HostListener,\n} from \"@angular/core\";\nimport { FormControl, ControlValueAccessor, NgControl } from \"@angular/forms\";\nimport {\n    MatFormFieldControl,\n    MAT_FORM_FIELD,\n    MatFormField,\n} from \"@angular/material/form-field\";\nimport {\n    MatAutocompleteOrigin,\n    MatAutocompleteTrigger,\n    MatAutocompleteSelectedEvent,\n} from \"@angular/material/autocomplete\";\nimport { FocusMonitor } from \"@angular/cdk/a11y\";\nimport {\n    coerceBooleanProperty,\n    coerceNumberProperty,\n} from \"@angular/cdk/coercion\";\nimport {\n    Subject,\n    Observable,\n    of,\n    from,\n    merge,\n    iif,\n    OperatorFunction,\n    empty,\n    combineLatest,\n    zip,\n} from \"rxjs\";\nimport {\n    filter,\n    takeUntil,\n    switchMap,\n    toArray,\n    debounceTime,\n    distinctUntilChanged,\n    shareReplay,\n    share,\n    mapTo,\n    startWith,\n    tap,\n    map,\n} from \"rxjs/operators\";\n\ntype Emptyable<T> = T | null | undefined;\ntype AnyFunction = (...args: any[]) => any;\n\n@Directive({\n    selector: \"[pglOptionDef]\",\n})\nexport class PGLOptionDef {}\n\n@Directive({\n    selector: \"[pglEmptyOptionDef]\",\n})\nexport class PGLEmptyOptionDef {}\n\n@Directive({\n    selector: \"[pglLoadingOptionDef]\",\n})\nexport class PGLLoadingOptionDef {}\n\nexport function optionalStartWith<T, D>(str: D): OperatorFunction<T, T | D> {\n    return (source: Observable<T>) =>\n        coerceBooleanProperty(str) ? source.pipe(startWith(str)) : source;\n}\n\n@Component({\n    selector: \"pgl-search-select\",\n    template: `\n        <input\n            [placeholder]=\"!hidePlaceholder ? placeholder : ''\"\n            #autoCompleteInput\n            [matAutocomplete]=\"listOptions\"\n            [formControl]=\"searchField\"\n            [matAutocompleteConnectedTo]=\"host\"\n            [attr.aria-describedby]=\"describedBy\"\n            [attr.aria-labelledby]=\"parentFormField?.getLabelId()\"\n            (focusin)=\"onFocusIn($event)\"\n            (focusout)=\"onFocusOut($event)\"\n        />\n        <div class=\"open-button\">\n            <button\n                matSuffix\n                tabindex=\"-1\"\n                mat-icon-button\n                (click)=\"toggle($event)\"\n            >\n                <mat-icon>{{\n                    !listOptions.isOpen ? buttons.open : buttons.close\n                }}</mat-icon>\n            </button>\n        </div>\n\n        <mat-autocomplete\n            #listOptions=\"matAutocomplete\"\n            class=\"dropdown-panel-custom\"\n            (optionSelected)=\"select($event)\"\n            [autoActiveFirstOption]=\"autoActiveFirstOption\"\n            [displayWith]=\"displayWith\"\n        >\n            <ng-container *ngIf=\"isLoading$ | async; else list\">\n                <mat-option class=\"is-loading\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            loadingOptionDef\n                                ? loadingOptionDef\n                                : defaultLoadingOption\n                        \"\n                    ></ng-container>\n                </mat-option>\n            </ng-container>\n\n            <ng-template #list>\n                <ng-container *ngIf=\"options$ | async as ops\">\n                    <mat-option *ngIf=\"emptyOptionDef && isEmptyOptionFirst\">\n                        <ng-container\n                            *ngTemplateOutlet=\"emptyOptionDef\"\n                        ></ng-container>\n                    </mat-option>\n                    <mat-option *ngFor=\"let option of ops\" [value]=\"option\">\n                        <ng-container\n                            *ngTemplateOutlet=\"\n                                optionDef ? optionDef : defaultOption;\n                                context: { $implicit: option }\n                            \"\n                        ></ng-container>\n                    </mat-option>\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            emptyOptionDef && !isEmptyOptionFirst\n                                ? emptyOptionDef\n                                : false\n                        \"\n                    ></ng-container>\n                </ng-container>\n            </ng-template>\n\n            <ng-template #defaultOption let-option>\n                {{ displayWith(option) }}\n            </ng-template>\n\n            <ng-template #defaultLoadingOption>\n                <mat-progress-bar mode=\"query\"></mat-progress-bar>\n            </ng-template>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            input {\n                border: none;\n                background: none;\n                padding: 0;\n                outline: none;\n                font: inherit;\n                flex: 1;\n                width: 100%;\n                max-width: 100%;\n                vertical-align: bottom;\n                text-align: inherit;\n            }\n            span {\n                opacity: 0;\n                transition: opacity 200ms;\n            }\n            button {\n                align-self: center;\n                width: 30px;\n                height: 30px;\n                line-height: 30px;\n                border-radius: 10%;\n            }\n            :host.floating span {\n                opacity: 1;\n            }\n\n            input::-webkit-outer-spin-button,\n            input::-webkit-inner-spin-button {\n                -webkit-appearance: none;\n                margin: 0;\n            }\n\n            :host {\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                vertical-align: bottom;\n                margin-bottom: -0.2em;\n                margin-top: -0.0625em;\n            }\n            .open-button {\n                white-space: nowrap;\n                flex: none;\n                position: relative;\n            }\n            .open-button button {\n                font: inherit;\n                vertical-align: baseline;\n                height: 1.5em;\n                width: 1.5em;\n            }\n            .open-button .mat-icon-button .mat-icon {\n                height: 1.125em;\n                line-height: 1.125em;\n            }\n        `,\n    ],\n    providers: [\n        { provide: MatFormFieldControl, useExisting: PGLSearchSelectComponent },\n    ],\n})\nexport class PGLSearchSelectComponent<T>\n    implements\n        AfterViewInit,\n        MatFormFieldControl<Emptyable<T>>,\n        ControlValueAccessor,\n        OnDestroy,\n        MatAutocompleteOrigin\n{\n    // STATIC\n    static nextID = 0;\n\n    // PUBLIC\n    public searchField = new FormControl(\"\");\n    public stateChanges = new Subject<void>();\n    public controlType = \"pgl-search-select\";\n    public touched = false;\n    public focused = false;\n    public isLoading$!: Observable<boolean>;\n    public options$!: Observable<Emptyable<T[]>>;\n    public autofilled?: boolean;\n\n    // PRIVATE\n    private _options?: Emptyable<T[]>;\n    private _value?: Emptyable<T>;\n    private _placeholder?: Emptyable<string>;\n\n    // private _tabindex = 0;\n    private _disabled = false;\n    private _required = false;\n    private _displayLoading = true;\n    private _isEmptyOptionFirst = false;\n    private _destroyed$ = new Subject<void>();\n    private _searchTrigger$!: Observable<string>;\n    private _startWith = \"\";\n    // private _isStatic = false;\n    private _buttons: {\n        close: string;\n        open: string;\n    } = {\n        close: \"arrow_drop_up\",\n        open: \"arrow_drop_down\",\n    };\n\n    private _onChange: AnyFunction = (..._: any[]) => {\n        // console.error(\"onChange is not set\");\n    };\n    private _onTouched: AnyFunction = (..._: any[]) => {\n        // console.error(\"onTouch is not set\");\n    };\n\n    // GETTER AND SETTERS\n    get empty(): boolean {\n        return !coerceBooleanProperty(this._value);\n    }\n\n    get errorState(): boolean {\n        return coerceBooleanProperty(\n                this.ngControl?.errors !== null && this.touched\n        );\n    }\n\n    get host(): MatAutocompleteOrigin {\n        return this;\n    }\n\n    get hidePlaceholder(): boolean {\n        return this._formField\n            ? this._formField._hideControlPlaceholder()\n            : false;\n    }\n\n    get hasControl(): boolean {\n        return !!this.ngControl && !!this.ngControl.control;\n    }\n\n    @Input()\n    get displayLoading(): boolean {\n        return this._displayLoading;\n    }\n    set displayLoading(val: boolean) {\n        this._displayLoading = coerceBooleanProperty(val);\n        this._stateChanged();\n    }\n\n    // OPTIONS\n    @Input()\n    get options(): Emptyable<T[]> {\n        return this._options;\n    }\n    set options(op: Emptyable<T[]>) {\n        if (!op || !Array.isArray(op)) {\n            return;\n        }\n        this._options = op;\n        this._stateChanged();\n    }\n\n    // DISABLED\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(dis: boolean) {\n        this._disabled = coerceBooleanProperty(dis);\n        this._stateChanged();\n    }\n\n    // REQUIRED\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n    set required(req: boolean) {\n        this._required = coerceBooleanProperty(req);\n        this._stateChanged();\n    }\n\n    // PLACEHOLDER\n    @Input()\n    get placeholder(): string {\n        return this._placeholder || \"\";\n    }\n    set placeholder(plh: string) {\n        this._placeholder = plh || \"\";\n        this._stateChanged();\n    }\n\n    // VALUE\n    @Input()\n    get value(): Emptyable<T> {\n        return this._value;\n    }\n\n    set value(val: Emptyable<T>) {\n        this._value = val;\n        this.searchField.setValue(this._value);\n        this._stateChanged();\n        this._onChange(this._value);\n    }\n\n    // Buttons\n    @Input()\n    get buttons(): {\n        close: string;\n        open: string;\n    } {\n        return this._buttons;\n    }\n    set buttons(value: { close: string; open: string }) {\n        this._buttons = value;\n    }\n\n    @Input(\"pglEmptyOptionFirst\")\n    get isEmptyOptionFirst(): boolean {\n        return this._isEmptyOptionFirst;\n    }\n    set isEmptyOptionFirst(val: boolean) {\n        this._isEmptyOptionFirst = coerceBooleanProperty(val);\n    }\n\n    // START WITH\n    @Input()\n    get startWith(): string {\n        return this._startWith;\n    }\n    set startWith(value: string) {\n        this._startWith = value;\n    }\n\n    // TODO: Implement static dropdown items\n    // @Input()\n    // get isStatic(): boolean {\n    //     return this._isStatic;\n    // }\n    // set isStatic(val: boolean) {\n    //     this._isStatic = coerceBooleanProperty(val);\n    // }\n\n    // DISPLAY FN\n    @Input() displayWith = (item: string | T) => `${item || \"\"}`;\n    // VALUE FN\n    @Input() valueWith: (item: T) => T = (item: T) => item;\n    // FILTER WITH FN\n    @Input() filterWith = (val: any) =>\n        !val || typeof val != \"string\"\n            ? of(this.options)\n            : from(this.options || []).pipe(\n                  filter((o) => this.displayWith(o).startsWith(val)),\n                  toArray()\n              );\n    @Input() searchWait = 500;\n    @Input() autoActiveFirstOption = false;\n\n    @Output() onSelect = new EventEmitter<Emptyable<T>>();\n    @Output() onFilter = new EventEmitter<string>();\n\n    // HOSTBINDING\n    @HostBinding(\"class.floating\")\n    get shouldLabelFloat(): boolean {\n        return this.focused || !this.empty || !!this.searchField.value;\n    }\n    @HostBinding() id = `${\n        this.controlType\n    }-${PGLSearchSelectComponent.nextID++}`;\n    @HostBinding(\"attr.aria-describedby\") describedBy = \"\";\n\n    @HostListener(\"click\")\n    onClick(): void {\n        if (this.autoComplete && !this.autoComplete.autocomplete.isOpen) {\n            this.autoComplete.openPanel();\n        }\n    }\n    // VIEW CHILD\n    @ViewChild(\"autoCompleteInput\", { read: MatAutocompleteTrigger })\n    autoComplete!: MatAutocompleteTrigger;\n\n    // CONTENT CHILD\n    @ContentChild(PGLOptionDef, { read: TemplateRef })\n    optionDef?: PGLOptionDef;\n    @ContentChild(PGLEmptyOptionDef, { read: TemplateRef })\n    emptyOptionDef?: PGLEmptyOptionDef;\n    @ContentChild(PGLLoadingOptionDef, { read: TemplateRef })\n    loadingOptionDef?: PGLLoadingOptionDef;\n\n    constructor(\n        private _fm: FocusMonitor,\n        public elementRef: ElementRef<HTMLElement>,\n        @Optional()\n        @Inject(MAT_FORM_FIELD)\n        @Host()\n        private _formField: MatFormField,\n        @Optional() public parentFormField: MatFormField,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        // this._fm\n        //     .monitor(this.elementRef.nativeElement, true)\n        //     .subscribe((origin) => {\n        //         this.focused = !!origin;\n        //         if (this.hasControl && !this.ngControl.touched) {\n        //             this.ngControl.control?.markAsTouched();\n        //         }\n        //         if (!this.focused && this.searchField.value !== this._value) {\n        //             this.searchField.patchValue(this.value, {\n        //                 emitEvent: false,\n        //             });\n        //         }\n        //     });\n        if (this.ngControl != null) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    onFocusIn(event: FocusEvent): void {\n        // console.log(event);\n        if (!this.focused) {\n            this.focused = true;\n            if(this.searchField.value !== this._value){\n                this.searchField.patchValue(this.value, {\n                    emitEvent: false,\n                });\n            }\n            this.stateChanges.next();\n          }\n    }\n    onFocusOut(event: FocusEvent): void {\n        // console.log(event);\n        if (!this.elementRef.nativeElement.contains(event.relatedTarget as Element)) {\n            this.touched = true;\n            this.focused = false;\n            this._onTouched();\n            this.stateChanges.next();\n          }\n    }\n\n    setDescribedByIds(ids: string[]): void {\n        this.describedBy = ids.join(\" \");\n    }\n\n    ngAfterViewInit(): void {\n        this._searchTrigger$ = this.searchField.valueChanges.pipe(\n            filter((val) => typeof val == \"string\"),\n            optionalStartWith(this.startWith),\n            distinctUntilChanged(),\n            debounceTime(this.searchWait),\n            tap((val: string) => this.onFilter.next(val)),\n            shareReplay(1)\n        );\n        this.options$ = merge(\n            this.stateChanges.pipe(switchMap((_) => this._searchTrigger$)),\n            this._searchTrigger$\n        ).pipe(\n            switchMap(this.filterWith),\n            takeUntil(this._destroyed$),\n            filter((val) => !!val),\n            shareReplay()\n        );\n        this.isLoading$ = merge(\n            this._searchTrigger$.pipe(mapTo(this.displayLoading)),\n            this.options$.pipe(mapTo(false))\n        );\n    }\n\n    ngDoCheck(){\n        if(this.ngControl && this.ngControl.touched != this.touched){\n            this.touched = this.ngControl.touched ?? false;\n            this._stateChanged();\n            // console.log(\"ng do check\", this.ngControl.touched)\n        }\n    }\n\n    ngOnDestroy(): void {\n        // this._fm.stopMonitoring(this.elementRef);\n        this._destroyed$.next();\n        this._destroyed$.complete();\n    }\n\n    // PRIVATE METHODS\n    private _stateChanged(): void {\n        this.stateChanges.next();\n    }\n\n    // PUBLIC METHODS\n\n    toggle(e: MouseEvent): void {\n        e.preventDefault();\n        e.stopPropagation();\n        if (this.autoComplete.autocomplete.isOpen) {\n            this.autoComplete.closePanel();\n            return;\n        }\n        this.autoComplete.openPanel();\n    }\n    select(e: MatAutocompleteSelectedEvent): void {\n        if (e.option.value === undefined) {\n            e.option.value = null;\n            this.searchField.patchValue(null);\n            this.options$ = this.filterWith(this.startWith);\n        }\n        this._value = e.option.value as T;\n        this._onChange(this._value);\n        this.onSelect.emit(this._value);\n    }\n\n    onContainerClick(event: MouseEvent): void {\n        if ((event.target as Element).tagName.toLowerCase() !== \"input\") {\n            const input = this.elementRef.nativeElement.querySelector(\"input\");\n            if (input) {\n                input.focus();\n            }\n        }\n    }\n\n    // ControlValueAccessor methods\n    /**\n     *\n     */\n    writeValue(v: T): void {\n        // if (!v) {\n        //     return;\n        // }\n        this.value = v;\n    }\n    registerOnChange(fn: (...args: any[]) => any): void {\n        this._onChange = fn\n    }\n    registerOnTouched(fn: (...args: any[]) => any): void {\n        this._onTouched = fn\n    }\n    setDisabledState?(_: boolean): void {}\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef } from './pgl-search-select.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule} from '@angular/material/input';\nimport { MatIconModule} from '@angular/material/icon';\nimport { MatProgressBarModule} from '@angular/material/progress-bar';\nimport { MatButtonModule} from '@angular/material/button';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatOptionModule } from '@angular/material/core';\n\n@NgModule({\n  declarations: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef],\n  imports: [\n    BrowserAnimationsModule,\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatProgressBarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatOptionModule\n  ],\n  exports: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef]\n})\nexport class PglSearchSelectModule { }\n","/*\n * Public API Surface of pgl-search-select\n */\n\nexport * from './lib/pgl-search-select.component';\nexport * from './lib/pgl-search-select.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Directive, EventEmitter, TemplateRef, Component, Optional, Inject, Host, Self, Input, Output, HostBinding, HostListener, ViewChild, ContentChild, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i6 from '@angular/material/autocomplete';\nimport { MatAutocompleteTrigger, MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, of, from, merge } from 'rxjs';\nimport { startWith, filter, toArray, distinctUntilChanged, debounceTime, tap, shareReplay, switchMap, takeUntil, mapTo } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/material/core';\nimport { MatOptionModule } from '@angular/material/core';\nimport * as i8 from '@angular/material/progress-bar';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport * as i9 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatInputModule } from '@angular/material/input';\n\nclass PGLOptionDef {\n}\n/** @nocollapse */ PGLOptionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLOptionDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ PGLOptionDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: PGLOptionDef, selector: \"[pglOptionDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLOptionDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[pglOptionDef]\",\n                }]\n        }] });\nclass PGLEmptyOptionDef {\n}\n/** @nocollapse */ PGLEmptyOptionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLEmptyOptionDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ PGLEmptyOptionDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: PGLEmptyOptionDef, selector: \"[pglEmptyOptionDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLEmptyOptionDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[pglEmptyOptionDef]\",\n                }]\n        }] });\nclass PGLLoadingOptionDef {\n}\n/** @nocollapse */ PGLLoadingOptionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLLoadingOptionDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n/** @nocollapse */ PGLLoadingOptionDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: PGLLoadingOptionDef, selector: \"[pglLoadingOptionDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLLoadingOptionDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[pglLoadingOptionDef]\",\n                }]\n        }] });\nfunction optionalStartWith(str) {\n    return (source) => coerceBooleanProperty(str) ? source.pipe(startWith(str)) : source;\n}\nclass PGLSearchSelectComponent {\n    constructor(_fm, elementRef, _formField, parentFormField, ngControl) {\n        this._fm = _fm;\n        this.elementRef = elementRef;\n        this._formField = _formField;\n        this.parentFormField = parentFormField;\n        this.ngControl = ngControl;\n        // PUBLIC\n        this.searchField = new FormControl(\"\");\n        this.stateChanges = new Subject();\n        this.controlType = \"pgl-search-select\";\n        this.touched = false;\n        this.focused = false;\n        // private _tabindex = 0;\n        this._disabled = false;\n        this._required = false;\n        this._displayLoading = true;\n        this._isEmptyOptionFirst = false;\n        this._destroyed$ = new Subject();\n        this._startWith = \"\";\n        // private _isStatic = false;\n        this._buttons = {\n            close: \"arrow_drop_up\",\n            open: \"arrow_drop_down\",\n        };\n        this._onChange = (..._) => {\n            // console.error(\"onChange is not set\");\n        };\n        this._onTouched = (..._) => {\n            // console.error(\"onTouch is not set\");\n        };\n        // TODO: Implement static dropdown items\n        // @Input()\n        // get isStatic(): boolean {\n        //     return this._isStatic;\n        // }\n        // set isStatic(val: boolean) {\n        //     this._isStatic = coerceBooleanProperty(val);\n        // }\n        // DISPLAY FN\n        this.displayWith = (item) => `${item || \"\"}`;\n        // VALUE FN\n        this.valueWith = (item) => item;\n        // FILTER WITH FN\n        this.filterWith = (val) => !val || typeof val != \"string\"\n            ? of(this.options)\n            : from(this.options || []).pipe(filter((o) => this.displayWith(o).startsWith(val)), toArray());\n        this.searchWait = 500;\n        this.autoActiveFirstOption = false;\n        this.onSelect = new EventEmitter();\n        this.onFilter = new EventEmitter();\n        this.id = `${this.controlType}-${PGLSearchSelectComponent.nextID++}`;\n        this.describedBy = \"\";\n        // this._fm\n        //     .monitor(this.elementRef.nativeElement, true)\n        //     .subscribe((origin) => {\n        //         this.focused = !!origin;\n        //         if (this.hasControl && !this.ngControl.touched) {\n        //             this.ngControl.control?.markAsTouched();\n        //         }\n        //         if (!this.focused && this.searchField.value !== this._value) {\n        //             this.searchField.patchValue(this.value, {\n        //                 emitEvent: false,\n        //             });\n        //         }\n        //     });\n        if (this.ngControl != null) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    // GETTER AND SETTERS\n    get empty() {\n        return !coerceBooleanProperty(this._value);\n    }\n    get errorState() {\n        var _a;\n        return coerceBooleanProperty(((_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.errors) !== null && this.touched);\n    }\n    get host() {\n        return this;\n    }\n    get hidePlaceholder() {\n        return this._formField\n            ? this._formField._hideControlPlaceholder()\n            : false;\n    }\n    get hasControl() {\n        return !!this.ngControl && !!this.ngControl.control;\n    }\n    get displayLoading() {\n        return this._displayLoading;\n    }\n    set displayLoading(val) {\n        this._displayLoading = coerceBooleanProperty(val);\n        this._stateChanged();\n    }\n    // OPTIONS\n    get options() {\n        return this._options;\n    }\n    set options(op) {\n        if (!op || !Array.isArray(op)) {\n            return;\n        }\n        this._options = op;\n        this._stateChanged();\n    }\n    // DISABLED\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(dis) {\n        this._disabled = coerceBooleanProperty(dis);\n        this._stateChanged();\n    }\n    // REQUIRED\n    get required() {\n        return this._required;\n    }\n    set required(req) {\n        this._required = coerceBooleanProperty(req);\n        this._stateChanged();\n    }\n    // PLACEHOLDER\n    get placeholder() {\n        return this._placeholder || \"\";\n    }\n    set placeholder(plh) {\n        this._placeholder = plh || \"\";\n        this._stateChanged();\n    }\n    // VALUE\n    get value() {\n        return this._value;\n    }\n    set value(val) {\n        this._value = val;\n        this.searchField.setValue(this._value);\n        this._stateChanged();\n        this._onChange(this._value);\n    }\n    // Buttons\n    get buttons() {\n        return this._buttons;\n    }\n    set buttons(value) {\n        this._buttons = value;\n    }\n    get isEmptyOptionFirst() {\n        return this._isEmptyOptionFirst;\n    }\n    set isEmptyOptionFirst(val) {\n        this._isEmptyOptionFirst = coerceBooleanProperty(val);\n    }\n    // START WITH\n    get startWith() {\n        return this._startWith;\n    }\n    set startWith(value) {\n        this._startWith = value;\n    }\n    // HOSTBINDING\n    get shouldLabelFloat() {\n        return this.focused || !this.empty || !!this.searchField.value;\n    }\n    onClick() {\n        if (this.autoComplete && !this.autoComplete.autocomplete.isOpen) {\n            this.autoComplete.openPanel();\n        }\n    }\n    onFocusIn(event) {\n        // console.log(event);\n        if (!this.focused) {\n            this.focused = true;\n            if (this.searchField.value !== this._value) {\n                this.searchField.patchValue(this.value, {\n                    emitEvent: false,\n                });\n            }\n            this.stateChanges.next();\n        }\n    }\n    onFocusOut(event) {\n        // console.log(event);\n        if (!this.elementRef.nativeElement.contains(event.relatedTarget)) {\n            this.touched = true;\n            this.focused = false;\n            this._onTouched();\n            this.stateChanges.next();\n        }\n    }\n    setDescribedByIds(ids) {\n        this.describedBy = ids.join(\" \");\n    }\n    ngAfterViewInit() {\n        this._searchTrigger$ = this.searchField.valueChanges.pipe(filter((val) => typeof val == \"string\"), optionalStartWith(this.startWith), distinctUntilChanged(), debounceTime(this.searchWait), tap((val) => this.onFilter.next(val)), shareReplay(1));\n        this.options$ = merge(this.stateChanges.pipe(switchMap((_) => this._searchTrigger$)), this._searchTrigger$).pipe(switchMap(this.filterWith), takeUntil(this._destroyed$), filter((val) => !!val), shareReplay());\n        this.isLoading$ = merge(this._searchTrigger$.pipe(mapTo(this.displayLoading)), this.options$.pipe(mapTo(false)));\n    }\n    ngDoCheck() {\n        var _a;\n        if (this.ngControl && this.ngControl.touched != this.touched) {\n            this.touched = (_a = this.ngControl.touched) !== null && _a !== void 0 ? _a : false;\n            this._stateChanged();\n            // console.log(\"ng do check\", this.ngControl.touched)\n        }\n    }\n    ngOnDestroy() {\n        // this._fm.stopMonitoring(this.elementRef);\n        this._destroyed$.next();\n        this._destroyed$.complete();\n    }\n    // PRIVATE METHODS\n    _stateChanged() {\n        this.stateChanges.next();\n    }\n    // PUBLIC METHODS\n    toggle(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        if (this.autoComplete.autocomplete.isOpen) {\n            this.autoComplete.closePanel();\n            return;\n        }\n        this.autoComplete.openPanel();\n    }\n    select(e) {\n        if (e.option.value === undefined) {\n            e.option.value = null;\n            this.searchField.patchValue(null);\n            this.options$ = this.filterWith(this.startWith);\n        }\n        this._value = e.option.value;\n        this._onChange(this._value);\n        this.onSelect.emit(this._value);\n    }\n    onContainerClick(event) {\n        if (event.target.tagName.toLowerCase() !== \"input\") {\n            const input = this.elementRef.nativeElement.querySelector(\"input\");\n            if (input) {\n                input.focus();\n            }\n        }\n    }\n    // ControlValueAccessor methods\n    /**\n     *\n     */\n    writeValue(v) {\n        // if (!v) {\n        //     return;\n        // }\n        this.value = v;\n    }\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    setDisabledState(_) { }\n}\n// STATIC\nPGLSearchSelectComponent.nextID = 0;\n/** @nocollapse */ PGLSearchSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLSearchSelectComponent, deps: [{ token: i1.FocusMonitor }, { token: i0.ElementRef }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: i2.MatFormField, optional: true }, { token: i3.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });\n/** @nocollapse */ PGLSearchSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: PGLSearchSelectComponent, selector: \"pgl-search-select\", inputs: { displayLoading: \"displayLoading\", options: \"options\", disabled: \"disabled\", required: \"required\", placeholder: \"placeholder\", value: \"value\", buttons: \"buttons\", isEmptyOptionFirst: [\"pglEmptyOptionFirst\", \"isEmptyOptionFirst\"], startWith: \"startWith\", displayWith: \"displayWith\", valueWith: \"valueWith\", filterWith: \"filterWith\", searchWait: \"searchWait\", autoActiveFirstOption: \"autoActiveFirstOption\" }, outputs: { onSelect: \"onSelect\", onFilter: \"onFilter\" }, host: { listeners: { \"click\": \"onClick()\" }, properties: { \"class.floating\": \"this.shouldLabelFloat\", \"id\": \"this.id\", \"attr.aria-describedby\": \"this.describedBy\" } }, providers: [\n        { provide: MatFormFieldControl, useExisting: PGLSearchSelectComponent },\n    ], queries: [{ propertyName: \"optionDef\", first: true, predicate: PGLOptionDef, descendants: true, read: TemplateRef }, { propertyName: \"emptyOptionDef\", first: true, predicate: PGLEmptyOptionDef, descendants: true, read: TemplateRef }, { propertyName: \"loadingOptionDef\", first: true, predicate: PGLLoadingOptionDef, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: \"autoComplete\", first: true, predicate: [\"autoCompleteInput\"], descendants: true, read: MatAutocompleteTrigger }], ngImport: i0, template: `\n        <input\n            [placeholder]=\"!hidePlaceholder ? placeholder : ''\"\n            #autoCompleteInput\n            [matAutocomplete]=\"listOptions\"\n            [formControl]=\"searchField\"\n            [matAutocompleteConnectedTo]=\"host\"\n            [attr.aria-describedby]=\"describedBy\"\n            [attr.aria-labelledby]=\"parentFormField?.getLabelId()\"\n            (focusin)=\"onFocusIn($event)\"\n            (focusout)=\"onFocusOut($event)\"\n        />\n        <div class=\"open-button\">\n            <button\n                matSuffix\n                tabindex=\"-1\"\n                mat-icon-button\n                (click)=\"toggle($event)\"\n            >\n                <mat-icon>{{\n                    !listOptions.isOpen ? buttons.open : buttons.close\n                }}</mat-icon>\n            </button>\n        </div>\n\n        <mat-autocomplete\n            #listOptions=\"matAutocomplete\"\n            class=\"dropdown-panel-custom\"\n            (optionSelected)=\"select($event)\"\n            [autoActiveFirstOption]=\"autoActiveFirstOption\"\n            [displayWith]=\"displayWith\"\n        >\n            <ng-container *ngIf=\"isLoading$ | async; else list\">\n                <mat-option class=\"is-loading\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            loadingOptionDef\n                                ? loadingOptionDef\n                                : defaultLoadingOption\n                        \"\n                    ></ng-container>\n                </mat-option>\n            </ng-container>\n\n            <ng-template #list>\n                <ng-container *ngIf=\"options$ | async as ops\">\n                    <mat-option *ngIf=\"emptyOptionDef && isEmptyOptionFirst\">\n                        <ng-container\n                            *ngTemplateOutlet=\"emptyOptionDef\"\n                        ></ng-container>\n                    </mat-option>\n                    <mat-option *ngFor=\"let option of ops\" [value]=\"option\">\n                        <ng-container\n                            *ngTemplateOutlet=\"\n                                optionDef ? optionDef : defaultOption;\n                                context: { $implicit: option }\n                            \"\n                        ></ng-container>\n                    </mat-option>\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            emptyOptionDef && !isEmptyOptionFirst\n                                ? emptyOptionDef\n                                : false\n                        \"\n                    ></ng-container>\n                </ng-container>\n            </ng-template>\n\n            <ng-template #defaultOption let-option>\n                {{ displayWith(option) }}\n            </ng-template>\n\n            <ng-template #defaultLoadingOption>\n                <mat-progress-bar mode=\"query\"></mat-progress-bar>\n            </ng-template>\n        </mat-autocomplete>\n    `, isInline: true, styles: [\"input{border:none;background:none;padding:0;outline:none;font:inherit;flex:1;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}span{opacity:0;transition:opacity .2s}button{align-self:center;width:30px;height:30px;line-height:30px;border-radius:10%}:host.floating span{opacity:1}input::-webkit-outer-spin-button,input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}:host{display:flex;flex-direction:row;align-items:center;vertical-align:bottom;margin-bottom:-.2em;margin-top:-.0625em}.open-button{white-space:nowrap;flex:none;position:relative}.open-button button{font:inherit;vertical-align:baseline;height:1.5em;width:1.5em}.open-button .mat-icon-button .mat-icon{height:1.125em;line-height:1.125em}\\n\"], components: [{ type: i4.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i5.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { type: i6.MatAutocomplete, selector: \"mat-autocomplete\", inputs: [\"disableRipple\"], exportAs: [\"matAutocomplete\"] }, { type: i7.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { type: i8.MatProgressBar, selector: \"mat-progress-bar\", inputs: [\"color\", \"value\", \"bufferValue\", \"mode\"], outputs: [\"animationEnd\"], exportAs: [\"matProgressBar\"] }], directives: [{ type: i6.MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", exportAs: [\"matAutocompleteTrigger\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { type: i2.MatSuffix, selector: \"[matSuffix]\" }, { type: i9.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i9.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i9.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"async\": i9.AsyncPipe } });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PGLSearchSelectComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"pgl-search-select\",\n                    template: `\n        <input\n            [placeholder]=\"!hidePlaceholder ? placeholder : ''\"\n            #autoCompleteInput\n            [matAutocomplete]=\"listOptions\"\n            [formControl]=\"searchField\"\n            [matAutocompleteConnectedTo]=\"host\"\n            [attr.aria-describedby]=\"describedBy\"\n            [attr.aria-labelledby]=\"parentFormField?.getLabelId()\"\n            (focusin)=\"onFocusIn($event)\"\n            (focusout)=\"onFocusOut($event)\"\n        />\n        <div class=\"open-button\">\n            <button\n                matSuffix\n                tabindex=\"-1\"\n                mat-icon-button\n                (click)=\"toggle($event)\"\n            >\n                <mat-icon>{{\n                    !listOptions.isOpen ? buttons.open : buttons.close\n                }}</mat-icon>\n            </button>\n        </div>\n\n        <mat-autocomplete\n            #listOptions=\"matAutocomplete\"\n            class=\"dropdown-panel-custom\"\n            (optionSelected)=\"select($event)\"\n            [autoActiveFirstOption]=\"autoActiveFirstOption\"\n            [displayWith]=\"displayWith\"\n        >\n            <ng-container *ngIf=\"isLoading$ | async; else list\">\n                <mat-option class=\"is-loading\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            loadingOptionDef\n                                ? loadingOptionDef\n                                : defaultLoadingOption\n                        \"\n                    ></ng-container>\n                </mat-option>\n            </ng-container>\n\n            <ng-template #list>\n                <ng-container *ngIf=\"options$ | async as ops\">\n                    <mat-option *ngIf=\"emptyOptionDef && isEmptyOptionFirst\">\n                        <ng-container\n                            *ngTemplateOutlet=\"emptyOptionDef\"\n                        ></ng-container>\n                    </mat-option>\n                    <mat-option *ngFor=\"let option of ops\" [value]=\"option\">\n                        <ng-container\n                            *ngTemplateOutlet=\"\n                                optionDef ? optionDef : defaultOption;\n                                context: { $implicit: option }\n                            \"\n                        ></ng-container>\n                    </mat-option>\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            emptyOptionDef && !isEmptyOptionFirst\n                                ? emptyOptionDef\n                                : false\n                        \"\n                    ></ng-container>\n                </ng-container>\n            </ng-template>\n\n            <ng-template #defaultOption let-option>\n                {{ displayWith(option) }}\n            </ng-template>\n\n            <ng-template #defaultLoadingOption>\n                <mat-progress-bar mode=\"query\"></mat-progress-bar>\n            </ng-template>\n        </mat-autocomplete>\n    `,\n                    styles: [\n                        `\n            input {\n                border: none;\n                background: none;\n                padding: 0;\n                outline: none;\n                font: inherit;\n                flex: 1;\n                width: 100%;\n                max-width: 100%;\n                vertical-align: bottom;\n                text-align: inherit;\n            }\n            span {\n                opacity: 0;\n                transition: opacity 200ms;\n            }\n            button {\n                align-self: center;\n                width: 30px;\n                height: 30px;\n                line-height: 30px;\n                border-radius: 10%;\n            }\n            :host.floating span {\n                opacity: 1;\n            }\n\n            input::-webkit-outer-spin-button,\n            input::-webkit-inner-spin-button {\n                -webkit-appearance: none;\n                margin: 0;\n            }\n\n            :host {\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                vertical-align: bottom;\n                margin-bottom: -0.2em;\n                margin-top: -0.0625em;\n            }\n            .open-button {\n                white-space: nowrap;\n                flex: none;\n                position: relative;\n            }\n            .open-button button {\n                font: inherit;\n                vertical-align: baseline;\n                height: 1.5em;\n                width: 1.5em;\n            }\n            .open-button .mat-icon-button .mat-icon {\n                height: 1.125em;\n                line-height: 1.125em;\n            }\n        `,\n                    ],\n                    providers: [\n                        { provide: MatFormFieldControl, useExisting: PGLSearchSelectComponent },\n                    ],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1.FocusMonitor }, { type: i0.ElementRef }, { type: i2.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }, {\n                        type: Host\n                    }] }, { type: i2.MatFormField, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.NgControl, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }];\n    }, propDecorators: { displayLoading: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], buttons: [{\n                type: Input\n            }], isEmptyOptionFirst: [{\n                type: Input,\n                args: [\"pglEmptyOptionFirst\"]\n            }], startWith: [{\n                type: Input\n            }], displayWith: [{\n                type: Input\n            }], valueWith: [{\n                type: Input\n            }], filterWith: [{\n                type: Input\n            }], searchWait: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input\n            }], onSelect: [{\n                type: Output\n            }], onFilter: [{\n                type: Output\n            }], shouldLabelFloat: [{\n                type: HostBinding,\n                args: [\"class.floating\"]\n            }], id: [{\n                type: HostBinding\n            }], describedBy: [{\n                type: HostBinding,\n                args: [\"attr.aria-describedby\"]\n            }], onClick: [{\n                type: HostListener,\n                args: [\"click\"]\n            }], autoComplete: [{\n                type: ViewChild,\n                args: [\"autoCompleteInput\", { read: MatAutocompleteTrigger }]\n            }], optionDef: [{\n                type: ContentChild,\n                args: [PGLOptionDef, { read: TemplateRef }]\n            }], emptyOptionDef: [{\n                type: ContentChild,\n                args: [PGLEmptyOptionDef, { read: TemplateRef }]\n            }], loadingOptionDef: [{\n                type: ContentChild,\n                args: [PGLLoadingOptionDef, { read: TemplateRef }]\n            }] } });\n\nclass PglSearchSelectModule {\n}\n/** @nocollapse */ PglSearchSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PglSearchSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ PglSearchSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PglSearchSelectModule, declarations: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef], imports: [BrowserAnimationsModule,\n        CommonModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatAutocompleteModule,\n        MatProgressBarModule,\n        MatIconModule,\n        MatButtonModule,\n        MatOptionModule], exports: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef] });\n/** @nocollapse */ PglSearchSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PglSearchSelectModule, imports: [[\n            BrowserAnimationsModule,\n            CommonModule,\n            ReactiveFormsModule,\n            MatFormFieldModule,\n            MatInputModule,\n            MatAutocompleteModule,\n            MatProgressBarModule,\n            MatIconModule,\n            MatButtonModule,\n            MatOptionModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: PglSearchSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef],\n                    imports: [\n                        BrowserAnimationsModule,\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatFormFieldModule,\n                        MatInputModule,\n                        MatAutocompleteModule,\n                        MatProgressBarModule,\n                        MatIconModule,\n                        MatButtonModule,\n                        MatOptionModule\n                    ],\n                    exports: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef]\n                }]\n        }] });\n\n/*\n * Public API Surface of pgl-search-select\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PGLEmptyOptionDef, PGLLoadingOptionDef, PGLOptionDef, PGLSearchSelectComponent, PglSearchSelectModule, optionalStartWith };\n//# sourceMappingURL=pgl-cortex-pgl-search-select.mjs.map\n","map":{"version":3,"file":"pgl-cortex-pgl-search-select.mjs","sources":["../../../projects/pgl-search-select/src/lib/pgl-search-select.component.ts","../../../projects/pgl-search-select/src/lib/pgl-search-select.module.ts","../../../projects/pgl-search-select/src/public-api.ts","../../../projects/pgl-search-select/src/pgl-cortex-pgl-search-select.ts"],"sourcesContent":["import {\n    Component,\n    OnInit,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    DoCheck,\n    Input,\n    HostBinding,\n    Output,\n    EventEmitter,\n    ViewChild,\n    TemplateRef,\n    Directive,\n    Optional,\n    Self,\n    ContentChild,\n    Inject,\n    Host,\n    HostListener,\n} from \"@angular/core\";\nimport { FormControl, ControlValueAccessor, NgControl } from \"@angular/forms\";\nimport {\n    MatFormFieldControl,\n    MAT_FORM_FIELD,\n    MatFormField,\n} from \"@angular/material/form-field\";\nimport {\n    MatAutocompleteOrigin,\n    MatAutocompleteTrigger,\n    MatAutocompleteSelectedEvent,\n} from \"@angular/material/autocomplete\";\nimport { FocusMonitor } from \"@angular/cdk/a11y\";\nimport {\n    coerceBooleanProperty,\n    coerceNumberProperty,\n} from \"@angular/cdk/coercion\";\nimport {\n    Subject,\n    Observable,\n    of,\n    from,\n    merge,\n    iif,\n    OperatorFunction,\n    empty,\n    combineLatest,\n    zip,\n} from \"rxjs\";\nimport {\n    filter,\n    takeUntil,\n    switchMap,\n    toArray,\n    debounceTime,\n    distinctUntilChanged,\n    shareReplay,\n    share,\n    mapTo,\n    startWith,\n    tap,\n    map,\n} from \"rxjs/operators\";\n\ntype Emptyable<T> = T | null | undefined;\ntype AnyFunction = (...args: any[]) => any;\n\n@Directive({\n    selector: \"[pglOptionDef]\",\n})\nexport class PGLOptionDef {}\n\n@Directive({\n    selector: \"[pglEmptyOptionDef]\",\n})\nexport class PGLEmptyOptionDef {}\n\n@Directive({\n    selector: \"[pglLoadingOptionDef]\",\n})\nexport class PGLLoadingOptionDef {}\n\nexport function optionalStartWith<T, D>(str: D): OperatorFunction<T, T | D> {\n    return (source: Observable<T>) =>\n        coerceBooleanProperty(str) ? source.pipe(startWith(str)) : source;\n}\n\n@Component({\n    selector: \"pgl-search-select\",\n    template: `\n        <input\n            [placeholder]=\"!hidePlaceholder ? placeholder : ''\"\n            #autoCompleteInput\n            [matAutocomplete]=\"listOptions\"\n            [formControl]=\"searchField\"\n            [matAutocompleteConnectedTo]=\"host\"\n            [attr.aria-describedby]=\"describedBy\"\n            [attr.aria-labelledby]=\"parentFormField?.getLabelId()\"\n            (focusin)=\"onFocusIn($event)\"\n            (focusout)=\"onFocusOut($event)\"\n        />\n        <div class=\"open-button\">\n            <button\n                matSuffix\n                tabindex=\"-1\"\n                mat-icon-button\n                (click)=\"toggle($event)\"\n            >\n                <mat-icon>{{\n                    !listOptions.isOpen ? buttons.open : buttons.close\n                }}</mat-icon>\n            </button>\n        </div>\n\n        <mat-autocomplete\n            #listOptions=\"matAutocomplete\"\n            class=\"dropdown-panel-custom\"\n            (optionSelected)=\"select($event)\"\n            [autoActiveFirstOption]=\"autoActiveFirstOption\"\n            [displayWith]=\"displayWith\"\n        >\n            <ng-container *ngIf=\"isLoading$ | async; else list\">\n                <mat-option class=\"is-loading\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            loadingOptionDef\n                                ? loadingOptionDef\n                                : defaultLoadingOption\n                        \"\n                    ></ng-container>\n                </mat-option>\n            </ng-container>\n\n            <ng-template #list>\n                <ng-container *ngIf=\"options$ | async as ops\">\n                    <mat-option *ngIf=\"emptyOptionDef && isEmptyOptionFirst\">\n                        <ng-container\n                            *ngTemplateOutlet=\"emptyOptionDef\"\n                        ></ng-container>\n                    </mat-option>\n                    <mat-option *ngFor=\"let option of ops\" [value]=\"option\">\n                        <ng-container\n                            *ngTemplateOutlet=\"\n                                optionDef ? optionDef : defaultOption;\n                                context: { $implicit: option }\n                            \"\n                        ></ng-container>\n                    </mat-option>\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            emptyOptionDef && !isEmptyOptionFirst\n                                ? emptyOptionDef\n                                : false\n                        \"\n                    ></ng-container>\n                </ng-container>\n            </ng-template>\n\n            <ng-template #defaultOption let-option>\n                {{ displayWith(option) }}\n            </ng-template>\n\n            <ng-template #defaultLoadingOption>\n                <mat-progress-bar mode=\"query\"></mat-progress-bar>\n            </ng-template>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            input {\n                border: none;\n                background: none;\n                padding: 0;\n                outline: none;\n                font: inherit;\n                flex: 1;\n                width: 100%;\n                max-width: 100%;\n                vertical-align: bottom;\n                text-align: inherit;\n            }\n            span {\n                opacity: 0;\n                transition: opacity 200ms;\n            }\n            button {\n                align-self: center;\n                width: 30px;\n                height: 30px;\n                line-height: 30px;\n                border-radius: 10%;\n            }\n            :host.floating span {\n                opacity: 1;\n            }\n\n            input::-webkit-outer-spin-button,\n            input::-webkit-inner-spin-button {\n                -webkit-appearance: none;\n                margin: 0;\n            }\n\n            :host {\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                vertical-align: bottom;\n                margin-bottom: -0.2em;\n                margin-top: -0.0625em;\n            }\n            .open-button {\n                white-space: nowrap;\n                flex: none;\n                position: relative;\n            }\n            .open-button button {\n                font: inherit;\n                vertical-align: baseline;\n                height: 1.5em;\n                width: 1.5em;\n            }\n            .open-button .mat-icon-button .mat-icon {\n                height: 1.125em;\n                line-height: 1.125em;\n            }\n        `,\n    ],\n    providers: [\n        { provide: MatFormFieldControl, useExisting: PGLSearchSelectComponent },\n    ],\n})\nexport class PGLSearchSelectComponent<T>\n    implements\n        AfterViewInit,\n        MatFormFieldControl<Emptyable<T>>,\n        ControlValueAccessor,\n        OnDestroy,\n        MatAutocompleteOrigin\n{\n    // STATIC\n    static nextID = 0;\n\n    // PUBLIC\n    public searchField = new FormControl(\"\");\n    public stateChanges = new Subject<void>();\n    public controlType = \"pgl-search-select\";\n    public touched = false;\n    public focused = false;\n    public isLoading$!: Observable<boolean>;\n    public options$!: Observable<Emptyable<T[]>>;\n    public autofilled?: boolean;\n\n    // PRIVATE\n    private _options?: Emptyable<T[]>;\n    private _value?: Emptyable<T>;\n    private _placeholder?: Emptyable<string>;\n\n    // private _tabindex = 0;\n    private _disabled = false;\n    private _required = false;\n    private _displayLoading = true;\n    private _isEmptyOptionFirst = false;\n    private _destroyed$ = new Subject<void>();\n    private _searchTrigger$!: Observable<string>;\n    private _startWith = \"\";\n    // private _isStatic = false;\n    private _buttons: {\n        close: string;\n        open: string;\n    } = {\n        close: \"arrow_drop_up\",\n        open: \"arrow_drop_down\",\n    };\n\n    private _onChange: AnyFunction = (..._: any[]) => {\n        // console.error(\"onChange is not set\");\n    };\n    private _onTouched: AnyFunction = (..._: any[]) => {\n        // console.error(\"onTouch is not set\");\n    };\n\n    // GETTER AND SETTERS\n    get empty(): boolean {\n        return !coerceBooleanProperty(this._value);\n    }\n\n    get errorState(): boolean {\n        return coerceBooleanProperty(\n                this.ngControl?.errors !== null && this.touched\n        );\n    }\n\n    get host(): MatAutocompleteOrigin {\n        return this;\n    }\n\n    get hidePlaceholder(): boolean {\n        return this._formField\n            ? this._formField._hideControlPlaceholder()\n            : false;\n    }\n\n    get hasControl(): boolean {\n        return !!this.ngControl && !!this.ngControl.control;\n    }\n\n    @Input()\n    get displayLoading(): boolean {\n        return this._displayLoading;\n    }\n    set displayLoading(val: boolean) {\n        this._displayLoading = coerceBooleanProperty(val);\n        this._stateChanged();\n    }\n\n    // OPTIONS\n    @Input()\n    get options(): Emptyable<T[]> {\n        return this._options;\n    }\n    set options(op: Emptyable<T[]>) {\n        if (!op || !Array.isArray(op)) {\n            return;\n        }\n        this._options = op;\n        this._stateChanged();\n    }\n\n    // DISABLED\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(dis: boolean) {\n        this._disabled = coerceBooleanProperty(dis);\n        this._stateChanged();\n    }\n\n    // REQUIRED\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n    set required(req: boolean) {\n        this._required = coerceBooleanProperty(req);\n        this._stateChanged();\n    }\n\n    // PLACEHOLDER\n    @Input()\n    get placeholder(): string {\n        return this._placeholder || \"\";\n    }\n    set placeholder(plh: string) {\n        this._placeholder = plh || \"\";\n        this._stateChanged();\n    }\n\n    // VALUE\n    @Input()\n    get value(): Emptyable<T> {\n        return this._value;\n    }\n\n    set value(val: Emptyable<T>) {\n        this._value = val;\n        this.searchField.setValue(this._value);\n        this._stateChanged();\n        this._onChange(this._value);\n    }\n\n    // Buttons\n    @Input()\n    get buttons(): {\n        close: string;\n        open: string;\n    } {\n        return this._buttons;\n    }\n    set buttons(value: { close: string; open: string }) {\n        this._buttons = value;\n    }\n\n    @Input(\"pglEmptyOptionFirst\")\n    get isEmptyOptionFirst(): boolean {\n        return this._isEmptyOptionFirst;\n    }\n    set isEmptyOptionFirst(val: boolean) {\n        this._isEmptyOptionFirst = coerceBooleanProperty(val);\n    }\n\n    // START WITH\n    @Input()\n    get startWith(): string {\n        return this._startWith;\n    }\n    set startWith(value: string) {\n        this._startWith = value;\n    }\n\n    // TODO: Implement static dropdown items\n    // @Input()\n    // get isStatic(): boolean {\n    //     return this._isStatic;\n    // }\n    // set isStatic(val: boolean) {\n    //     this._isStatic = coerceBooleanProperty(val);\n    // }\n\n    // DISPLAY FN\n    @Input() displayWith = (item: string | T) => `${item || \"\"}`;\n    // VALUE FN\n    @Input() valueWith: (item: T) => T = (item: T) => item;\n    // FILTER WITH FN\n    @Input() filterWith = (val: any) =>\n        !val || typeof val != \"string\"\n            ? of(this.options)\n            : from(this.options || []).pipe(\n                  filter((o) => this.displayWith(o).startsWith(val)),\n                  toArray()\n              );\n    @Input() searchWait = 500;\n    @Input() autoActiveFirstOption = false;\n\n    @Output() onSelect = new EventEmitter<Emptyable<T>>();\n    @Output() onFilter = new EventEmitter<string>();\n\n    // HOSTBINDING\n    @HostBinding(\"class.floating\")\n    get shouldLabelFloat(): boolean {\n        return this.focused || !this.empty || !!this.searchField.value;\n    }\n    @HostBinding() id = `${\n        this.controlType\n    }-${PGLSearchSelectComponent.nextID++}`;\n    @HostBinding(\"attr.aria-describedby\") describedBy = \"\";\n\n    @HostListener(\"click\")\n    onClick(): void {\n        if (this.autoComplete && !this.autoComplete.autocomplete.isOpen) {\n            this.autoComplete.openPanel();\n        }\n    }\n    // VIEW CHILD\n    @ViewChild(\"autoCompleteInput\", { read: MatAutocompleteTrigger })\n    autoComplete!: MatAutocompleteTrigger;\n\n    // CONTENT CHILD\n    @ContentChild(PGLOptionDef, { read: TemplateRef })\n    optionDef?: PGLOptionDef;\n    @ContentChild(PGLEmptyOptionDef, { read: TemplateRef })\n    emptyOptionDef?: PGLEmptyOptionDef;\n    @ContentChild(PGLLoadingOptionDef, { read: TemplateRef })\n    loadingOptionDef?: PGLLoadingOptionDef;\n\n    constructor(\n        private _fm: FocusMonitor,\n        public elementRef: ElementRef<HTMLElement>,\n        @Optional()\n        @Inject(MAT_FORM_FIELD)\n        @Host()\n        private _formField: MatFormField,\n        @Optional() public parentFormField: MatFormField,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        // this._fm\n        //     .monitor(this.elementRef.nativeElement, true)\n        //     .subscribe((origin) => {\n        //         this.focused = !!origin;\n        //         if (this.hasControl && !this.ngControl.touched) {\n        //             this.ngControl.control?.markAsTouched();\n        //         }\n        //         if (!this.focused && this.searchField.value !== this._value) {\n        //             this.searchField.patchValue(this.value, {\n        //                 emitEvent: false,\n        //             });\n        //         }\n        //     });\n        if (this.ngControl != null) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    onFocusIn(event: FocusEvent): void {\n        // console.log(event);\n        if (!this.focused) {\n            this.focused = true;\n            if(this.searchField.value !== this._value){\n                this.searchField.patchValue(this.value, {\n                    emitEvent: false,\n                });\n            }\n            this.stateChanges.next();\n          }\n    }\n    onFocusOut(event: FocusEvent): void {\n        // console.log(event);\n        if (!this.elementRef.nativeElement.contains(event.relatedTarget as Element)) {\n            this.touched = true;\n            this.focused = false;\n            this._onTouched();\n            this.stateChanges.next();\n          }\n    }\n\n    setDescribedByIds(ids: string[]): void {\n        this.describedBy = ids.join(\" \");\n    }\n\n    ngAfterViewInit(): void {\n        this._searchTrigger$ = this.searchField.valueChanges.pipe(\n            filter((val) => typeof val == \"string\"),\n            optionalStartWith(this.startWith),\n            distinctUntilChanged(),\n            debounceTime(this.searchWait),\n            tap((val: string) => this.onFilter.next(val)),\n            shareReplay(1)\n        );\n        this.options$ = merge(\n            this.stateChanges.pipe(switchMap((_) => this._searchTrigger$)),\n            this._searchTrigger$\n        ).pipe(\n            switchMap(this.filterWith),\n            takeUntil(this._destroyed$),\n            filter((val) => !!val),\n            shareReplay()\n        );\n        this.isLoading$ = merge(\n            this._searchTrigger$.pipe(mapTo(this.displayLoading)),\n            this.options$.pipe(mapTo(false))\n        );\n    }\n\n    ngDoCheck(){\n        if(this.ngControl && this.ngControl.touched != this.touched){\n            this.touched = this.ngControl.touched ?? false;\n            this._stateChanged();\n            // console.log(\"ng do check\", this.ngControl.touched)\n        }\n    }\n\n    ngOnDestroy(): void {\n        // this._fm.stopMonitoring(this.elementRef);\n        this._destroyed$.next();\n        this._destroyed$.complete();\n    }\n\n    // PRIVATE METHODS\n    private _stateChanged(): void {\n        this.stateChanges.next();\n    }\n\n    // PUBLIC METHODS\n\n    toggle(e: MouseEvent): void {\n        e.preventDefault();\n        e.stopPropagation();\n        if (this.autoComplete.autocomplete.isOpen) {\n            this.autoComplete.closePanel();\n            return;\n        }\n        this.autoComplete.openPanel();\n    }\n    select(e: MatAutocompleteSelectedEvent): void {\n        if (e.option.value === undefined) {\n            e.option.value = null;\n            this.searchField.patchValue(null);\n            this.options$ = this.filterWith(this.startWith);\n        }\n        this._value = e.option.value as T;\n        this._onChange(this._value);\n        this.onSelect.emit(this._value);\n    }\n\n    onContainerClick(event: MouseEvent): void {\n        if ((event.target as Element).tagName.toLowerCase() !== \"input\") {\n            const input = this.elementRef.nativeElement.querySelector(\"input\");\n            if (input) {\n                input.focus();\n            }\n        }\n    }\n\n    // ControlValueAccessor methods\n    /**\n     *\n     */\n    writeValue(v: T): void {\n        // if (!v) {\n        //     return;\n        // }\n        this.value = v;\n    }\n    registerOnChange(fn: (...args: any[]) => any): void {\n        this._onChange = fn\n    }\n    registerOnTouched(fn: (...args: any[]) => any): void {\n        this._onTouched = fn\n    }\n    setDisabledState?(_: boolean): void {}\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef } from './pgl-search-select.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule} from '@angular/material/input';\nimport { MatIconModule} from '@angular/material/icon';\nimport { MatProgressBarModule} from '@angular/material/progress-bar';\nimport { MatButtonModule} from '@angular/material/button';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatOptionModule } from '@angular/material/core';\n\n@NgModule({\n  declarations: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef],\n  imports: [\n    BrowserAnimationsModule,\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatProgressBarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatOptionModule\n  ],\n  exports: [PGLSearchSelectComponent, PGLOptionDef, PGLEmptyOptionDef, PGLLoadingOptionDef]\n})\nexport class PglSearchSelectModule { }\n","/*\n * Public API Surface of pgl-search-select\n */\n\nexport * from './lib/pgl-search-select.component';\nexport * from './lib/pgl-search-select.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}